<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><help_text>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..*</help_text><element><id>UMLClass</id><coordinates><x>750</x><y>1030</y><w>290</w><h>250</h></coordinates><panel_attributes>_cs2800::Stack_
bg=pink
This class represents a 
Stack of Entry values
--
*Attributes*
-size: integer
-entries: List&lt;Entry&gt;
--
*Responsibilities*
+getSize(): Integer
/.   Returns the number of entries in the stack/
+push(entry: Entry)
/    Adds a new Entry to the Stack/
+pop(): Entry {exception=EmptyStack}
/    Returns (and removes) newest Entry/
+top(): Entry {exception=EmptyStack}
/    Return (but keeps) newset Entry/

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>760</x><y>760</y><w>270</w><h>140</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt; 
bg=yellow
_cs2800::Calculator_
Allows calculation of 
String Expressions
--
*Responsibilities*
+evaluate(String: expression): float
     {exception=InvalidExpression}
/    Evaluates and calculates a string expression/</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1100</x><y>1470</y><w>210</w><h>150</h></coordinates><panel_attributes>&lt;&lt;enumeration&gt;&gt; 
bg=orange
_cs2800::Type_
A list of the types of 
value an Entry can represent
--
_NUMBER_
_SYMBOL_
_STRING_
_INVALID_
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>750</x><y>1350</y><w>290</w><h>400</h></coordinates><panel_attributes>_cs2800::Entry_
bg=orange
Values stored in a Stack
--
*Attributes*
-number: float
-symbol: Symbol
-str: String
-type: Type
--
*Responsibilities*
&lt;&lt;constructor&gt;&gt; +Entry(float value)
&lt;&lt;constructor&gt;&gt; +Entry(Symbol which)
&lt;&lt;constructor&gt;&gt; +Entry(String string)
+getType(): Type
+getNumber(): float
              {exception=InvalidEntryType}
/ Returns the number stored in the Entry/
+getSymbol(): Symbol 
              {exception= InvalidEntryType}
/ Returns the symbol stored in the Entry/
+getStr(): String 
              {Exception= InvalidEntryType}
/ Returns the string stored in the Entry/
+toString(): String
/Returns a string representation of the entry/
+hashCode(): int
+equals(): boolean</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>460</x><y>1340</y><w>240</w><h>200</h></coordinates><panel_attributes>&lt;&lt;enumeration&gt;&gt; 
bg=orange
_cs2800::Symbol_
A list of the non-number tokens 
possible in an expression
--
_LEFT BRACKET_
_RIGHT BRACKET_
_TIMES_
_DIVIDE_
_PLUS_
_MINUS_
_INVALID_

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>750</x><y>30</y><w>320</w><h>170</h></coordinates><panel_attributes>&lt;&lt;model&gt;&gt;
bg=red
_cs2800: CalcModel_
Also shows the values of each of
the Calculator's memories.
--
*Attributes*
-revPolish: Calculator
-Standard: Calculator
--
*Responsibilities*
+evaluate(expr: String, infix:boolean): float
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>460</x><y>760</y><w>270</w><h>260</h></coordinates><panel_attributes>bg=pink
_cs2800::NumStack_
Since reverse Polish evaluation
only uses a Stack of numeric values
we provide a facade to hide details
--
*Attributes*
-numStack: Stack
--
*Responsibilities*
+getSize(): Integer
/    Returns the number of entries in the NumStack/
+push(i: float)
/    Adds a new float to the stack./
+pop(): float 
               {exception=EmptyStack}
/    Returns and removes newest float/
+isEmpty():boolean
/    Returns true if the NumStack is empty/

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1060</x><y>760</y><w>290</w><h>260</h></coordinates><panel_attributes>bg=pink
_cs2800::OpStack_
Since the Shunting algorithm
only uses a Stack of symbols 
we provide a facade to hide details
--
*Attributes*
-opStack: Stack
--
*Responsibilities*
+getSize() : Integer
/    Returns the number of entries in the OpStack/
+push(i: Symbol)
/    Adds a new Symbol to the OpStack/
+pop(): Symbol 
                    {exception=EmptyStack}
/    Returns and removes newest Symbol/
+isEmpty():boolean
/    Returns true if the stack is empty/

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1040</x><y>390</y><w>290</w><h>260</h></coordinates><panel_attributes>bg=yellow
_cs2800::StandardCalc_
Evaluates infix String Expressions
--
*Attributes*
-rpCalc: RevPolishCalc
-values: NumStack
-operators: OpStack
-stringBuilder: StringBuilder
--
*Responsibilities*
+infixToPostfix(String: expression): string
    {exception=InvalidExpression}
/    Converts and returns an infix expression in postfix/
+evaluate(String: what): float
     {exception=InvalidExpression}
/    Evaluates and calculates a string expression/</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>560</x><y>440</y><w>260</w><h>170</h></coordinates><panel_attributes>bg=yellow
_cs2800::RevPolishCalc_
Evaluates Reverse Polish
String Expressions
--
*Attributes*
-values: NumStack
--
*Responsibilities*
+evaluate(String: expression): float
     {exception=InvalidExpression}
/    Evaluates and calculates a string expression/</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>190</y><w>220</w><h>270</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>200;10;10;250</additional_attributes></element><element><id>Relation</id><coordinates><x>910</x><y>190</y><w>240</w><h>220</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;220;200</additional_attributes></element><element><id>Relation</id><coordinates><x>1150</x><y>640</y><w>60</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;40;120</additional_attributes></element><element><id>Relation</id><coordinates><x>1030</x><y>1010</y><w>180</w><h>160</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
&lt;&lt;facade&gt;&gt;</panel_attributes><additional_attributes>160;10;10;140</additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>1010</y><w>210</w><h>160</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1pos=-50,20
m1=&lt;&lt;facade&gt;&gt;</panel_attributes><additional_attributes>40;10;190;140</additional_attributes></element><element><id>Relation</id><coordinates><x>920</x><y>640</y><w>190</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;120;170;10</additional_attributes></element><element><id>Relation</id><coordinates><x>750</x><y>600</y><w>120</w><h>180</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>100;160;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>880</x><y>1270</y><w>30</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>1030</x><y>1420</y><w>170</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;150;50</additional_attributes></element><element><id>Relation</id><coordinates><x>690</x><y>1450</y><w>80</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>60;30;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>190</x><y>680</y><w>230</w><h>170</h></coordinates><panel_attributes>&lt;&lt;view&gt;&gt;
cs2800::GuiView
A graphical window with 
1. a text field for an expression
2. a "calculate" button
3. a radio button: 
   "Reverse Polish/Infix"
--
-expression: String
-answer: String
bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>350</x><y>60</y><w>420</w><h>130</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>400;110;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>250</x><y>320</y><w>100</w><h>220</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>80;200;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>0</x><y>320</y><w>130</w><h>380</h></coordinates><panel_attributes>lt=&lt;.
m2=&lt;&lt;Observer&gt;&gt;</panel_attributes><additional_attributes>10;360;50;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>50</x><y>20</y><w>310</w><h>310</h></coordinates><panel_attributes>&lt;&lt;controller&gt;&gt;
bg=blue
_cs2800:CalcController_
Create view and model.
Adds itself as an observer to the view
so that (asynchronous) changes
can be observed. 
--
*Attributes*
-model: CalcModel
-view: CalcView
-isInfix: boolean
--
*Responsibilities*
+calculate()
Is notified when a 
calculation is required
--
+expressionType()
Is notified when a change of 
expression type is indicated
group=2</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>560</x><y>600</y><w>110</w><h>180</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>90;10;10;160</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1380</x><y>710</y><w>270</w><h>310</h></coordinates><panel_attributes>bg=pink
_cs2800::StrStack_
The Shunting algorithm
requires reversing an expression in 
order to evaluate left to right - so 
we provide a facade to hide details
--
*Attributes*
-StrStack: Stack
--
*Responsibilities*
+getSize() : Integer
/    Returns the number of entries in the OpStack/
+isEmpty():boolean
/    Returns true if the stack is empty/
+push(str: String)
/    Adds a new String to the Stack/
+pop(): String 
                {exception=EmptyStack}
/    Returns and removes newest String/
+reverse(): void
/    Reverses the order of the StrStack/

</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1030</x><y>1010</y><w>500</w><h>230</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=&lt;&lt;facade&gt;&gt;
m1pos=-20,40</panel_attributes><additional_attributes>480;10;10;210</additional_attributes></element><element><id>Relation</id><coordinates><x>1320</x><y>500</y><w>200</w><h>230</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;180;210</additional_attributes></element><element><id>UMLClass</id><coordinates><x>30</x><y>0</y><w>350</w><h>400</h></coordinates><panel_attributes>valign=bottom
Controller
layer=0
fontsize=28
fg=magenta
bg=light_gray
group=2</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>500</y><w>440</w><h>400</h></coordinates><panel_attributes>valign=bottom
View Assembly
fontsize=28
fg=magenta
bg=light_gray
layer=-1</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>40</x><y>520</y><w>310</w><h>140</h></coordinates><panel_attributes>&lt;&lt;Interface&gt;&gt;
cs2800::ViewInterface
--
Responsibilities
--
+getExpression(): String
+setAnswer(str: String): void
+addCalcObserver(f:Runnable): void
+addTypeObserver(l:Consumer&lt;OpType&gt;):void
bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>680</y><w>150</w><h>150</h></coordinates><panel_attributes>&lt;&lt;view&gt;&gt;
cs2800::AsciiView
A menu based View
--
-expression: String
-answer: String
--
Responsibilities
--
+menu
bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>270</x><y>320</y><w>170</w><h>380</h></coordinates><panel_attributes>lt=&lt;.
m2=&lt;&lt;Observer&gt;&gt;</panel_attributes><additional_attributes>150;360;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>90</x><y>650</y><w>70</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>50;10;10;30</additional_attributes></element><element><id>Relation</id><coordinates><x>260</x><y>650</y><w>80</w><h>50</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;60;30</additional_attributes></element><element><id>UMLClass</id><coordinates><x>450</x><y>0</y><w>1320</w><h>1760</h></coordinates><panel_attributes>                                                              
                                                              
                                                              
                                                              Model Assembly
layer=0
fontsize=28
fg=magenta
bg=light_gray</panel_attributes><additional_attributes></additional_attributes></element></diagram>